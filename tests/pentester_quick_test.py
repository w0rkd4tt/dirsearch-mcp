#!/usr/bin/env python3
"""
Quick Pentester Test - Demonstrates enhanced scanning features
"""
import asyncio
import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent))

from src.core.dirsearch_engine import DirsearchEngine, ScanOptions
from src.utils.logger import LoggerSetup


async def pentester_demo():
    """Quick demo of pentester features"""
    # Initialize
    LoggerSetup.initialize()
    engine = DirsearchEngine()
    
    # Target
    target = sys.argv[1] if len(sys.argv) > 1 else "http://testphp.vulnweb.com"
    
    # Pentester wordlist - focused on high-value targets
    wordlist = [
        # Administrative interfaces
        "admin", "administrator", "admin-panel", "control-panel",
        "wp-admin", "login", "signin", "manager", "cpanel",
        
        # API endpoints
        "api", "v1", "v2", "api/v1", "api/v2", "rest", "graphql",
        "swagger", "api-docs", "api/users",
        
        # Sensitive files/backups
        "backup", "backup.sql", "database.sql", "dump.sql",
        "backup.zip", "site.zip", ".env", "config.php",
        ".git", ".git/config", ".gitignore",
        
        # Common directories
        "assets", "uploads", "files", "data", "logs",
        "cache", "tmp", "temp", "test", "dev",
        
        # Database interfaces
        "phpmyadmin", "pma", "adminer", "adminer.php",
        
        # Information disclosure
        "phpinfo.php", "info.php", "test.php", "robots.txt",
        "sitemap.xml", ".htaccess", "error.log"
    ]
    
    print(f"""
╔══════════════════════════════════════════════════════════╗
║           PENTESTER QUICK SCAN DEMO                      ║
╚══════════════════════════════════════════════════════════╝

Target: {target}
Wordlist: {len(wordlist)} high-value paths
Mode: Display each request with status code
Recursive: Enabled (depth: 2)
Including: ALL status codes
""")
    
    # Pentester options
    options = ScanOptions(
        threads=10,
        timeout=10,
        recursive=True,
        recursion_depth=2,
        detect_wildcards=True,
        follow_redirects=False,  # See actual redirects
        exclude_status_codes=[],  # Include everything
        crawl=True
    )
    
    print("\nStarting scan with real-time status display...\n")
    
    # Tracking results
    findings = {
        "200": [],
        "301/302": [],
        "401": [],
        "403": [],
        "other": []
    }
    
    def on_result(result):
        """Track results by category"""
        if result.status_code == 200:
            findings["200"].append(result)
        elif result.status_code in [301, 302]:
            findings["301/302"].append(result)
        elif result.status_code == 401:
            findings["401"].append(result)
        elif result.status_code == 403:
            findings["403"].append(result)
        elif result.status_code != 404:
            findings["other"].append(result)
    
    engine.set_result_callback(on_result)
    
    # Run scan with display progress
    try:
        results = await engine.scan_target(target, wordlist, options, display_progress=True)
        
        # Display summary
        print(f"\n\n{'='*60}")
        print("SCAN SUMMARY")
        print(f"{'='*60}")
        print(f"Total paths scanned: {len(wordlist)}")
        print(f"Total results (non-404): {len(results)}")
        
        # Show findings by category
        if findings["200"]:
            print(f"\n✅ ACCESSIBLE (200 OK) - {len(findings['200'])} found:")
            for r in findings["200"]:
                print(f"   {r.path} ({r.size} bytes)")
                
        if findings["301/302"]:
            print(f"\n↪️  REDIRECTS (301/302) - {len(findings['301/302'])} found:")
            for r in findings["301/302"]:
                print(f"   [{r.status_code}] {r.path}")
                
        if findings["403"]:
            print(f"\n🔒 FORBIDDEN (403) - {len(findings['403'])} found:")
            for r in findings["403"]:
                print(f"   {r.path}")
                
        if findings["401"]:
            print(f"\n🔐 AUTH REQUIRED (401) - {len(findings['401'])} found:")
            for r in findings["401"]:
                print(f"   {r.path}")
                
        # Security insights
        print(f"\n🛡️  SECURITY INSIGHTS:")
        sensitive = [r for r in results if any(s in r.path.lower() for s in ['.git', '.env', 'config', 'backup', 'admin'])]
        if sensitive:
            print(f"⚠️  Found {len(sensitive)} potentially sensitive resources!")
            for r in sensitive[:5]:
                print(f"   [{r.status_code}] {r.path}")
        else:
            print("✓ No obvious sensitive resources detected")
            
        # Pentester recommendations
        print(f"\n💡 PENTESTER RECOMMENDATIONS:")
        if findings["200"]:
            print("1. Investigate all 200 OK responses for information disclosure")
        if findings["403"]:
            print("2. 403 Forbidden indicates resources exist - try bypass techniques")
        if findings["301/302"]:
            print("3. Follow redirects manually to discover hidden endpoints")
        if sensitive:
            print("4. Priority: Check sensitive resources immediately!")
            
    except KeyboardInterrupt:
        print("\n\nScan interrupted")
    finally:
        await engine.close()


if __name__ == "__main__":
    print("""
Pentester Quick Test - Enhanced Directory Discovery

This demo shows:
- Real-time display of each path being checked
- Status code for every request
- Recursive scanning with same wordlist
- All status codes included (not just 200)

Usage:
    python pentester_quick_test.py [target_url]
""")
    
    asyncio.run(pentester_demo())